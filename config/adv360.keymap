#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&lt {
    tapping-term-ms = <150>;
};

&mt {
    tapping-term-ms = <150>;
};

/ {
    behaviors {
        #include "macros.dtsi"

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 37 38 39 40 41 42 43 44 45 53 54 55 56 57 58 59 68 69 70 71 72 73 74 75 35 36 52 65 66 67>;
            hold-trigger-on-release;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67 37 38 53 68 69 70>;
            hold-trigger-on-release;
        };

        ss: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            bindings = <&sk LSHFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        motog: momentary_toggle_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "MOMENTARY_TOGGLE_LAYER";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp LS(LA(LC(LG(F9))))  &none                &none            &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &none  &tog 2                                                                          &mo 4                   &kp LS(RIGHT_BRACKET)  &kp LS(LEFT_BRACKET)  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none     &none
&kp TAB                 &kp Q                &kp W            &kp E             &kp R              &kp T  &kp LS(LA(LC(LG(F7))))                                                          &kp LS(LA(LC(LG(F8))))  &kp Y                  &kp U                 &kp I                 &kp O                  &kp P     &kp EQUAL
&kp RS(APOSTROPHE)      &hml LEFT_CONTROL A  &hml LEFT_ALT S  &hml LEFT_GUI D   &hml LEFT_SHIFT F  &kp G  &kp LS(LA(LC(LG(F5))))  &tog 2        &none         &none          &tog 1       &kp LS(LA(LC(LG(F6))))  &kp H                  &hmr RIGHT_SHIFT J    &hmr RIGHT_GUI K      &hmr RIGHT_ALT L       &ss       &kp SINGLE_QUOTE
&kp LS(LA(LC(LG(F1))))  &kp Z                &kp X            &kp C             &kp V              &kp B                                        &kp HOME      &kp PG_UP                                           &kp N                  &kp M                 &kp COMMA             &kp DOT                &kp FSLH  &kp LS(LA(LC(LG(F2))))
&kp LS(LA(LC(LG(F3))))  &none                &kp RS(EQUAL)    &kp RS(MINUS)     &kp MINUS                 &lt 2 BACKSPACE         &lt 3 ESCAPE  &kp END       &kp PAGE_DOWN  &lt 3 ENTER  &lt 1 SPACE                                    &kp EQUAL             &kp LS(SEMICOLON)     &kp SEMICOLON          &none     &kp LS(LA(LC(LG(F4))))
            >;
        };

        shift {
            bindings = <
&trans  &trans                   &trans               &trans               &trans     &trans     &trans                                                 &trans  &trans     &trans                 &trans                 &trans                 &trans                        &trans
&trans  &kp RS(Q)                &kp RS(W)            &kp RS(E)            &kp RS(R)  &kp RS(T)  &trans                                                 &trans  &kp LS(Y)  &kp LS(U)              &kp LS(I)              &kp LS(O)              &kp LS(P)                     &kp LS(EQUAL)
&trans  &hml LEFT_CONTROL RS(A)  &hml LEFT_ALT RS(S)  &hml LEFT_GUI RS(D)  &kp RS(F)  &kp RS(G)  &trans         &trans      &trans      &trans  &trans  &trans  &kp LS(H)  &kp LS(J)              &hmr RIGHT_GUI LS(K)   &hmr RIGHT_ALT LS(L)   &hmr RIGHT_CONTROL SEMICOLON  &kp LS(DOUBLE_QUOTES)
&trans  &kp RS(Z)                &kp RS(X)            &kp RS(C)            &kp RS(V)  &kp RS(B)                             &trans      &trans                  &kp LS(N)  &kp LS(M)              &kp LS(COMMA)          &kp LS(DOT)            &kp LS(SLASH)                 &trans
&trans  &trans                   &trans               &trans               &trans                &kp BACKSPACE  &kp ESCAPE  &trans      &trans  &trans  &trans             &kp RIGHT_PARENTHESIS  &kp LS(RIGHT_BRACKET)  &kp LS(RIGHT_BRACKET)  &trans                        &trans
            >;
        };

        keypad {
            bindings = <
&trans  &trans                   &trans                &trans                &trans                  &trans  &trans                                          &trans     &trans  &kp KP_LEFT_PARENTHESIS  &kp KP_RIGHT_PARENTHESIS  &kp KP_EQUAL          &none                        &trans
&trans  &kp RS(GRAVE)            &kp RS(BACKSLASH)     &kp RS(N8)            &kp RS(N7)              &trans  &trans                                          &trans     &trans  &kp KP_N7                &kp KP_N8                 &kp KP_N9             &kp KP_PLUS                  &trans
&trans  &hml LEFT_CONTROL GRAVE  &hml LEFT_ALT RS(N6)  &hml LEFT_GUI RS(N5)  &hml LEFT_SHIFT RS(N4)  &trans  &trans  &trans  &trans      &trans  &trans      &trans     &trans  &hmr RIGHT_SHIFT KP_N4   &hmr RIGHT_GUI KP_N5      &hmr RIGHT_ALT KP_N6  &hmr RIGHT_CONTROL KP_MINUS  &trans
&trans  &kp BACKSLASH            &kp RS(N3)            &kp RS(N2)            &kp RS(N1)              &trans                  &trans      &trans                         &trans  &kp KP_N1                &kp KP_N2                 &kp KP_N3             &kp KP_MULTIPLY              &trans
&trans  &trans                   &trans                &trans                &trans                          &trans  &trans  &trans      &trans  &kp RETURN  &kp SPACE          &kp KP_N0                &kp KP_COMMA              &kp KP_DOT            &kp KP_SLASH                 &trans
            >;
        };

        fn {
            bindings = <
&kp F1  &kp F2                     &kp F3                     &kp F4                  &kp F5                  &kp F6                  &tog 2                                                      &mo 4   &kp F7          &kp F8          &kp F9        &kp F10          &kp F11  &kp F12
&trans  &kp LS(LA(LC(LG(EQUAL))))  &kp LS(LA(LC(LG(MINUS))))  &trans                  &trans                  &trans                  &none                                                       &none   &trans          &trans          &trans        &trans           &trans   &trans
&trans  &kp LS(LA(LC(LG(N1))))     &kp LS(LA(LC(LG(N2))))     &kp LS(LA(LC(LG(N3))))  &kp LS(LA(LC(LG(N4))))  &kp LS(LA(LC(LG(N5))))  &kp LS(LA(LC(LG(N6))))  &trans  &trans      &trans  &trans  &none   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans   &trans
&trans  &kp LS(LA(LC(LG(N7))))     &kp LS(LA(LC(LG(N8))))     &kp LS(LA(LC(LG(N9))))  &kp LS(LA(LC(LG(N0))))  &trans                                                  &trans      &trans                  &trans          &trans          &trans        &trans           &trans   &trans
&trans  &trans                     &trans                     &trans                  &trans                                          &trans                  &trans  &trans      &trans  &trans  &trans                  &trans          &trans        &trans           &trans   &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };
    };
};
