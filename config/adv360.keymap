#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&lt {
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
    flavor = "balanced";
};

&mt {
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;
    flavor = "tap-preferred";
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE DELETE>;

    /delete-property/ ignore-modifiers;
};

/ {
    behaviors {
        #include "macros.dtsi"

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 35 36 37 38 39 40 41 42 43 44 45 52 53 54 55 56 57 58 59 65 66 67 68 69 70 71 72 73 74 75>;
            hold-trigger-on-release;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 38 46 47 48 49 50 51 52 53 60 61 62 63 64 65 66 67 68 69 70>;
            hold-trigger-on-release;
        };

        ss: smart_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "SMART_SHIFT";
            #binding-cells = <0>;
            bindings = <&sl 1>, <&caps_word>;

            tapping-term-ms = <200>;
        };

        nd: num_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "NUM_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp X>, <&tog 2>;
        };

        sn: smart_num {
            compatible = "zmk,behavior-hold-tap";
            label = "SMART_NUM";
            bindings = <&mo>, <&nd>;

            #binding-cells = <2>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            tapping-term-ms = <200>;
        };

        i_morph: i_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "I_MORPH";
            bindings = <&kp I>, <&kp UP_ARROW>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        j_morph: j_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "J_MORPH";
            bindings = <&kp J>, <&kp LEFT_ARROW>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        k_morph: k_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "K_MORPH";
            bindings = <&kp K>, <&kp DOWN_ARROW>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        l_morph: l_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "L_MORPH";
            bindings = <&kp L>, <&kp RIGHT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        hmr_j: homerow_mods_right_j {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_J";
            bindings = <&kp>, <&j_morph>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 38 46 47 48 49 50 51 52 53 60 61 62 63 64 65 66 67 68 69 70>;
            hold-trigger-on-release;
        };

        hmr_k: homerow_mods_right_k {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_K";
            bindings = <&kp>, <&k_morph>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 38 46 47 48 49 50 51 52 53 60 61 62 63 64 65 66 67 68 69 70>;
            hold-trigger-on-release;
        };

        hmr_l: homerow_mods_right_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_L";
            bindings = <&kp>, <&l_morph>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 38 46 47 48 49 50 51 52 53 60 61 62 63 64 65 66 67 68 69 70>;
            hold-trigger-on-release;
        };

        mokp: mokp {
            compatible = "zmk,behavior-hold-tap";
            label = "MOKP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 37 38 39 40 41 42 43 44 45 53 54 55 56 57 58 59 68 69 70 71 72 73 74 75>;
            hold-trigger-on-release;
        };

        colon_morph: colon_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COLON_MORPH";
            bindings = <&kp COLON>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        hmr_colon: homerow_mods_right_colon {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_COLON";
            bindings = <&kp>, <&colon_morph>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 38 46 47 48 49 50 51 52 53 60 61 62 63 64 65 66 67 68 69 70>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_return {
            bindings = <&kp RETURN>;
            key-positions = <42 43>;
            slow-release;
            require-prior-idle-ms = <150>;
        };

        combo_copy {
            bindings = <&kp RG(C)>;
            key-positions = <49 48>;
            slow-release;
            require-prior-idle-ms = <150>;
        };

        combo_paste {
            bindings = <&kp RG(V)>;
            key-positions = <49 50>;
            slow-release;
            require-prior-idle-ms = <150>;
        };

        combo_clipboard_history {
            bindings = <&kp RS(RG(V))>;
            key-positions = <49 48 50>;
            slow-release;
            require-prior-idle-ms = <150>;
        };

        combo_cut {
            bindings = <&kp RG(X)>;
            key-positions = <47 48>;
            slow-release;
            require-prior-idle-ms = <150>;
        };

        combo_ctrl_f1 {
            bindings = <&kp LC(F1)>;
            key-positions = <43 42 41>;
            slow-release;
            require-prior-idle-ms = <150>;
        };

        combo_ctrl_f2 {
            bindings = <&kp LC(F2)>;
            key-positions = <24 23 25>;
            require-prior-idle-ms = <150>;
            slow-release;
        };

        combo_select_all {
            bindings = <&kp RG(A)>;
            key-positions = <30 31 32>;
            require-prior-idle-ms = <150>;
            slow-release;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <41 42>;
            slow-release;
            require-prior-idle-ms = <150>;
        };

        combo_ctrl_f3 {
            bindings = <&kp LC(F3)>;
            key-positions = <55 56 57>;
            slow-release;
            require-prior-idle-ms = <150>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&tog 7   &kp TILDE            &kp EXCLAMATION  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &none  &tog 2                                                                                            &mo 4                   &kp BACKSLASH  &kp QUESTION          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp K_PLAY_PAUSE            &kp C_PLAY_PAUSE
&tog 8   &kp Q                &kp W            &kp E             &kp R              &kp T  &kp LS(LA(LC(LG(F7))))                                                                            &kp LS(LA(LC(LG(F8))))  &kp Y          &kp U                 &i_morph              &kp O                  &kp P                       &kp BACKSLASH
&tog 9   &hml LEFT_CONTROL A  &hml LEFT_ALT S  &hml LEFT_GUI D   &hml LEFT_SHIFT F  &kp G  &kp LS(LA(LC(LG(F5))))  &kp C_PLAY_PAUSE  &kp LC(LA(LS(LG(F7))))      &kp LC(F9)     &kp LC(F10)  &kp LS(LA(LC(LG(F6))))  &kp H          &hmr_j RIGHT_SHIFT 0  &hmr_k RIGHT_GUI 0    &hmr_l RIGHT_ALT 0     &hmr_colon RIGHT_CONTROL 0  &kp DOUBLE_QUOTES
&tog 10  &kp Z                &kp X            &kp C             &kp V              &kp B                                            &none                       &none                                               &kp N          &kp M                 &kp COMMA             &kp DOT                &kp FSLH                    &kp LS(LA(LC(LG(F2))))
&tog 12  &none                &kp GRAVE        &kp PLUS          &kp EQUAL                 &lt 2 BACKSPACE         &mokp 3 ESCAPE    &sl 6                       &sk RIGHT_ALT  &ss          &kp SPACE                              &kp MINUS             &kp UNDER             &kp SEMICOLON          &none                       &kp LS(LA(LC(LG(F4))))
            >;
        };

        shift {
            bindings = <
&trans  &trans                   &trans               &trans               &trans     &trans     &trans                                      &trans  &trans     &trans     &kp RS(LEFT_BRACKET)  &kp RS(RIGHT_BRACKET)  &trans         &trans
&trans  &kp RS(Q)                &kp RS(W)            &kp RS(E)            &kp RS(R)  &kp RS(T)  &trans                                      &trans  &kp RS(Y)  &kp RS(U)  &kp RS(I)             &kp RS(O)              &kp RS(P)      &trans
&trans  &hml LEFT_CONTROL RS(A)  &hml LEFT_ALT RS(S)  &hml LEFT_GUI RS(D)  &kp RS(F)  &kp RS(G)  &trans  &trans  &trans      &trans  &trans  &trans  &kp RS(H)  &kp RS(J)  &hmr RIGHT_GUI RS(K)  &hmr RIGHT_ALT RS(L)   &kp SEMICOLON  &kp SINGLE_QUOTE
&trans  &kp RS(Z)                &kp RS(X)            &kp RS(C)            &kp RS(V)  &kp RS(B)                  &trans      &trans                  &kp LS(N)  &kp RS(M)  &kp RS(COMMA)         &kp RS(DOT)            &trans         &trans
&trans  &trans                   &trans               &trans               &trans                &trans  &trans  &trans      &trans  &trans  &trans             &trans     &trans                &trans                 &trans         &trans
            >;
        };

        num {
            bindings = <
&trans  &trans                   &trans                &trans                &trans                  &trans  &trans                                      &trans        &kp LA(LS(NUMBER_2))  &kp DOLLAR    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BACKSPACE  &kp LC(LA(LS(LG(F6))))
&trans  &trans                   &kp RS(BACKSLASH)     &kp RS(N8)            &kp RS(N7)              &trans  &trans                                      &trans        &trans                &kp NUMBER_7  &kp NUMBER_8          &kp NUMBER_9           &kp ASTERISK   &trans
&trans  &hml LEFT_CONTROL GRAVE  &hml LEFT_ALT RS(N6)  &hml LEFT_GUI RS(N5)  &hml LEFT_SHIFT RS(N4)  &trans  &trans  &trans  &trans      &trans  &trans  &trans        &trans                &kp NUMBER_4  &kp NUMBER_5          &kp NUMBER_6           &kp EQUAL      &trans
&trans  &trans                   &kp RS(N3)            &kp RS(N2)            &kp RS(N1)              &trans                  &trans      &trans                        &trans                &kp NUMBER_1  &kp NUMBER_2          &kp NUMBER_3           &kp SLASH      &trans
&trans  &trans                   &trans                &trans                &trans                          &trans  &trans  &trans      &trans  &trans  &kp NUMBER_0                        &kp MINUS     &kp PLUS              &kp DOT                &trans         &trans
            >;
        };

        wm {
            bindings = <
&trans  &trans         &trans         &trans         &trans                     &trans         &trans                                      &trans  &trans                  &kp LC(LA(F))           &kp LC(LA(G))         &kp LC(LA(H))            &kp LC(LA(I))          &trans
&trans  &kp RC(RA(S))  &kp RC(RA(T))  &kp RC(RA(U))  &kp RC(RA(V))              &trans         &trans                                      &trans  &kp LC(LA(E))           &kp LC(LA(A))           &kp LC(LA(B))         &kp LC(LA(C))            &kp LC(LA(D))          &trans
&trans  &kp RG(A)      &kp RC(RA(W))  &kp RC(RA(X))  &hml LEFT_SHIFT RC(RA(Y))  &kp RC(RA(Z))  &trans  &trans  &trans      &trans  &trans  &trans  &kp LC(LA(LEFT_ARROW))  &kp LC(LA(DOWN_ARROW))  &kp LC(LA(UP_ARROW))  &kp LC(LA(RIGHT_ARROW))  &kp LC(LA(SEMICOLON))  &trans
&trans  &kp RG(Z)      &kp RG(X)      &kp RG(C)      &kp RG(V)                  &trans                         &trans      &trans                  &kp LC(LA(N))           &kp LC(LA(J))           &kp LC(LA(K))         &kp LC(LA(L))            &kp LC(LA(M))          &trans
&trans  &trans         &trans         &trans         &trans                                    &trans  &trans  &trans      &trans  &trans  &trans                          &kp LC(LA(O))           &kp LC(LA(P))         &kp LC(LA(Q))            &kp LC(LA(R))          &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        capture {
            bindings = <
&trans  &trans  &trans              &trans              &trans              &trans              &trans                                      &trans  &trans  &trans      &trans       &trans     &trans  &trans
&trans  &trans  &kp LC(LA(LS(N9)))  &kp LC(LA(LS(N8)))  &kp LC(LA(LS(N7)))  &trans              &trans                                      &trans  &trans  &kp AMPS    &kp STAR     &kp PIPE   &trans  &trans
&trans  &trans  &kp LC(LA(LS(N6)))  &kp LC(LA(LS(N5)))  &kp LC(LA(LS(N4)))  &kp LC(LA(LS(N0)))  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &kp DOLLAR  &kp PERCENT  &kp CARET  &trans  &trans
&trans  &trans  &kp LC(LA(LS(N3)))  &kp LC(LA(LS(N2)))  &kp LC(LA(LS(N1)))  &trans                              &trans      &trans                  &trans  &kp EXCL    &kp AT       &kp HASH   &trans  &trans
&trans  &trans  &trans              &trans              &trans                                  &trans  &trans  &trans      &trans  &trans  &trans          &trans      &trans       &trans     &trans  &trans
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_8 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_9 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_10 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_11 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_12 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
